version: '3.8'

services:
  # API Principal
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: runtime
    container_name: restaurant-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_TYPE: ${DB_TYPE}
      MONGODB_URI: ${MONGODB_URI}
      POSTGRES_URI: ${POSTGRES_URI}
      REDIS_URI: ${REDIS_URI}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      SEARCH_SERVICE_URL: http://search-service:3001
      AUTH_SERVICE_URL: http://auth-service:3002
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "3000:3000"
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    depends_on:
      - redis
    networks:
      - restaurant-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Servicio de Búsqueda
  search-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.search
      target: runtime
    container_name: restaurant-search-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      ELASTICSEARCH_URI: ${ELASTICSEARCH_URI}
      REDIS_URI: ${REDIS_URI}
      API_URI: http://api:3000
    ports:
      - "3001:3001"
    volumes:
      - search_logs:/app/logs
    depends_on:
      - redis
      - api
    networks:
      - restaurant-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Servicio de Autenticación
  auth-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
      target: runtime
    container_name: restaurant-auth-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      AUTH_PORT: 3002
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_MANAGEMENT_CLIENT_ID: ${AUTH0_MANAGEMENT_CLIENT_ID}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET}
      REDIS_URI: ${REDIS_URI}
      JWT_SECRET: ${JWT_SECRET}
      API_BASE_URL: http://api:3000
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "3002:3002"
    volumes:
      - auth_logs:/app/logs
    depends_on:
      - redis
    networks:
      - restaurant-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: restaurant-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - restaurant-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: restaurant-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - search-service
      - auth-service
    networks:
      - restaurant-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: restaurant-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - restaurant-network-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: restaurant-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - restaurant-network-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Log Aggregation - Fluentd
  fluentd:
    build:
      context: ./monitoring/fluentd
      dockerfile: Dockerfile
    container_name: restaurant-fluentd-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/fluentd/conf:/fluentd/etc:ro
      - api_logs:/var/log/api:ro
      - search_logs:/var/log/search:ro
      - auth_logs:/var/log/auth:ro
      - nginx_logs:/var/log/nginx:ro
    ports:
      - "24224:24224"
    networks:
      - restaurant-network-prod
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  redis_data_prod:
    driver: local
  api_uploads:
    driver: local
  api_logs:
    driver: local
  search_logs:
    driver: local
  auth_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  restaurant-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16