version: '3.8'

services:
  # Base de datos MongoDB
  mongodb:
    image: mongo:6.0
    container_name: restaurant-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: restaurant_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_dev:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - restaurant-network-dev

  # Base de datos PostgreSQL
  postgresql:
    image: postgres:15
    container_name: restaurant-postgresql-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: restaurant_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data_dev:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - restaurant-network-dev

  # Redis para caché y rate limiting
  redis:
    image: redis:7-alpine
    container_name: restaurant-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - restaurant-network-dev

  # ElasticSearch para búsquedas
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: restaurant-elasticsearch-dev
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data_dev:/usr/share/elasticsearch/data
    networks:
      - restaurant-network-dev

  # API Principal
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: restaurant-api-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_TYPE: mongodb
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/restaurant_db?authSource=admin
      POSTGRES_URI: postgresql://postgres:password123@postgresql:5432/restaurant_db
      REDIS_URI: redis://redis:6379
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      SEARCH_SERVICE_URL: http://search-service:3001
      AUTH_SERVICE_URL: http://auth-service:3002
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - postgresql
      - redis
    networks:
      - restaurant-network-dev
    command: npm run dev

  # Servicio de Búsqueda
  search-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.search
    container_name: restaurant-search-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      ELASTICSEARCH_URI: http://elasticsearch:9200
      REDIS_URI: redis://redis:6379
      API_URI: http://api:3000
    ports:
      - "3001:3001"
    volumes:
      - ./search-service:/app
      - /app/node_modules
    depends_on:
      - elasticsearch
      - redis
      - api
    networks:
      - restaurant-network-dev
    command: npm run dev

  # Servicio de Autenticación
  auth-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
    container_name: restaurant-auth-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      AUTH_PORT: 3002
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_MANAGEMENT_CLIENT_ID: ${AUTH0_MANAGEMENT_CLIENT_ID}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET}
      REDIS_URI: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      API_BASE_URL: http://api:3000
    ports:
      - "3002:3002"
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    depends_on:
      - redis
    networks:
      - restaurant-network-dev
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: restaurant-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - search-service
      - auth-service
    networks:
      - restaurant-network-dev

  # Herramientas de desarrollo
  mailhog:
    image: mailhog/mailhog
    container_name: restaurant-mailhog-dev
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - restaurant-network-dev

  # Redis Commander para gestión visual de Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: restaurant-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - restaurant-network-dev

  # Mongo Express para gestión visual de MongoDB
  mongo-express:
    image: mongo-express
    container_name: restaurant-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
    depends_on:
      - mongodb
    networks:
      - restaurant-network-dev

volumes:
  mongodb_data_dev:
    driver: local
  postgresql_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  elasticsearch_data_dev:
    driver: local

networks:
  restaurant-network-dev:
    driver: bridge