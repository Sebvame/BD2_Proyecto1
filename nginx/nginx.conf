user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Backend API upstream
    upstream api_servers {
        least_conn;
        server api:3000;
        # Para escalabilidad horizontal, añadir más servidores:
        # server api2:3000;
        # server api3:3000;
    }

    # Search service upstream
    upstream search_servers {
        least_conn;
        server search-service:3001;
        # Para escalabilidad horizontal, añadir más servidores:
        # server search-service2:3001;
    }

    # Auth service upstream (si Auth0 no fuera externo)
    # upstream auth_servers {
    #     server auth-service:3002;
    # }

    server {
        listen 80;
        server_name localhost;

        # Health check
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"UP","timestamp":"$time_iso8601"}';
        }

        # API routes
        location /api/ {
            proxy_pass http://api_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Health check for API servers
            proxy_intercept_errors on;
            error_page 502 503 504 = @api_fallback;
        }

        # Search routes
        location /search/ {
            proxy_pass http://search_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Health check for search servers
            proxy_intercept_errors on;
            error_page 502 503 504 = @search_fallback;
        }

        # Auth0 está gestionado externamente, así que no necesitamos un proxy
        # Para Auth0, el cliente se comunica directamente

        # Frontend routes (si tenemos un frontend)
        # location / {
        #     root /usr/share/nginx/html;
        #     try_files $uri $uri/ /index.html;
        # }

        # Fallback para API servers
        location @api_fallback {
            add_header Content-Type application/json;
            return 503 '{"error":"Service Unavailable","message":"API servers are currently unavailable. Please try again later."}';
        }

        # Fallback para Search servers
        location @search_fallback {
            add_header Content-Type application/json;
            return 503 '{"error":"Service Unavailable","message":"Search servers are currently unavailable. Please try again later."}';
        }
    }
}